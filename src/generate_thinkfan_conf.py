#!/usr/bin/env python3

# A standalone command-line script to bootstrap a default, safe,
# and well-commented thinkfan.conf file. Its primary purpose is to give users
# a working starting point for their configuration, which they can then
# customize further, either manually or with the UI.

import subprocess
import json
import os
import re
import sys

def generate_thinkfan_config():
    """
    Discovers all hardware sensors and generates a complete, commented thinkfan.conf
    file, enabling only the primary CPU sensor by default.
    """
    try:
        result = subprocess.run(
            ["sensors", "-j"], 
            capture_output=True, 
            text=True, 
            check=True
        )
        sensor_data = json.loads(result.stdout)
    except Exception as e:
        print(f"Error: Could not execute or parse 'sensors -j'. Details: {e}", file=sys.stderr)
        return

    # --- Manually build the config string from scratch ---

    output_str = "# Autogenerated by generate_thinkfan_conf.py\n\n"
    output_str += "# This configuration has all detected sensors listed but commented out.\n"
    output_str += "# The primary CPU sensor has been automatically enabled.\n\n"

    # --- Fans Section ---
    output_str += "fans:\n"
    output_str += "  - tpacpi: /proc/acpi/ibm/fan\n\n"

    # --- Sensors Section ---
    output_str += "sensors:\n"
    
    all_sensor_inputs = []
    sensor_blocks = {}
    primary_cpu_hwmon_name = None

    # First pass: discover all sensors and identify the primary CPU
    for device_name in sorted(sensor_data.keys()):
        device_info = sensor_data[device_name]
        
        try:
            hwmon_name = device_name.split('-')[0]
        except:
            continue

        indices = []
        comments = []
        is_primary_cpu = False
        device_sensors = []

        for feature_name in sorted(device_info.keys()):
            feature_data = device_info[feature_name]
            if not isinstance(feature_data, dict): continue

            for key in sorted(feature_data.keys()):
                if key.endswith("_input") and key.startswith("temp"):
                    index = int(re.search(r'temp(\d+)_input', key).group(1))
                    if index not in indices:
                        indices.append(index)
                    
                    device_sensors.append({'index': index, 'device': hwmon_name, 'label': feature_name})
                    
                    if hwmon_name in ['coretemp', 'k10temp'] and feature_name in ["Package id 0", "Tctl", "Tdie"]:
                        is_primary_cpu = True

        if indices:
            indices.sort()
            device_sensors.sort(key=lambda s: s['index'])
            all_sensor_inputs.extend(device_sensors)

            block_str = f"  - hwmon: /sys/class/hwmon\n"
            block_str += f"    name: {hwmon_name}\n"
            block_str += f"    indices: {str(indices)}\n"
            block_str += f"    # Mappings for '{hwmon_name}':\n"
            for sensor in device_sensors:
                block_str += f"    #   {sensor['index']}: {sensor['label']}\n"
            sensor_blocks[hwmon_name] = block_str
            
            if is_primary_cpu:
                primary_cpu_hwmon_name = hwmon_name

    # Second pass: write the sensor blocks, commenting/uncommenting as needed
    for hwmon_name, block_content in sensor_blocks.items():
        if hwmon_name == primary_cpu_hwmon_name:
            output_str += f"# --- Primary CPU Sensor (Enabled) ---\n"
            output_str += block_content + "\n"
        else:
            output_str += f"# --- Sensor: {hwmon_name} (Disabled by default) ---\n"
            commented_block = "\n".join([f"#{line}" for line in block_content.splitlines()])
            output_str += commented_block + "\n\n"

    # --- Levels Section ---
    output_str += "\nlevels:\n"
    output_str += "# This is a default fan curve using the simple syntax, which works\n"
    output_str += "# because only one sensor group (CPU) is enabled above.\n"

    default_levels_simple = [
        [0, 0, 55], [2, 50, 65], [4, 60, 75],
        [7, 70, 85], [127, 80, 100]
    ]
    
    for level in default_levels_simple:
        output_str += f"  - {str(level)}\n"

    # --- Detailed Syntax Example ---
    output_str += "\n# --- Optional Detailed Syntax Example ---\n"
    output_str += "# If you enable more sensors above, you must switch to the detailed\n"
    output_str += "# syntax below by commenting out the simple list above and uncommenting\n"
    output_str += "# the detailed list below.\n\n"

    target_sensor_index = -1
    for i, sensor in enumerate(all_sensor_inputs):
        if sensor['device'] == primary_cpu_hwmon_name and sensor.get('is_primary'):
            target_sensor_index = i
            break
    if target_sensor_index == -1: target_sensor_index = 0

    lower_limits = [0] * len(all_sensor_inputs)
    upper_limits = [120] * len(all_sensor_inputs)
    lower_limits[target_sensor_index] = 55
    upper_limits[target_sensor_index] = 65
    
    pretty_names = [sensor['label'].replace(" ", "_") for sensor in all_sensor_inputs]

    # --- Column Alignment Logic ---
    column_widths = []
    for i in range(len(pretty_names)):
        # Find the widest item for each column
        width = max(len(pretty_names[i]), len(str(lower_limits[i])), len(str(upper_limits[i])))
        column_widths.append(width)

    # Build the formatted strings
    mask_str = "#     Format:      ["
    lower_limit_str = "#     lower_limit: ["
    upper_limit_str = "#     upper_limit: ["

    for i in range(len(pretty_names)):
        width = column_widths[i]
        mask_str += f"{pretty_names[i]:<{width}}"
        lower_limit_str += f"{str(lower_limits[i]):<{width}}"
        upper_limit_str += f"{str(upper_limits[i]):<{width}}"
        if i < len(pretty_names) - 1:
            mask_str += ", "
            lower_limit_str += ", "
            upper_limit_str += ", "

    mask_str += "]\n"
    lower_limit_str += "]\n"
    upper_limit_str += "]\n"

    output_str += mask_str
    output_str += "#\n"
    output_str += "# levels:\n"
    output_str += "#   - speed: 2\n"
    output_str += lower_limit_str
    output_str += upper_limit_str


    print(output_str.replace("'", ""))


if __name__ == "__main__":
    generate_thinkfan_config()
